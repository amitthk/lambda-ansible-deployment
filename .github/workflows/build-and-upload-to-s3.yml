name: Build and Upload to S3

on:
  push:
    branches:
      - main
      - master
      - develop
      - release/**
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  build-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Set GITHUB_USERNAME and GITHUB_TOKEN
        run: |
          echo "GITHUB_USERNAME=${{ secrets.GITHUB_USERNAME }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Build with Maven
        run: |
          cd java-app
          mvn clean package -DskipTests -s settings.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload JAR to S3
        run: |
          cd java-app
          SERVICE_NAME="discovery-service"
          JAR_FILE="target/${SERVICE_NAME}-*.jar"
          
          # Find the JAR file
          if ls $JAR_FILE 1> /dev/null 2>&1; then
            ACTUAL_JAR=$(ls $JAR_FILE | head -n 1)
            
            # Upload to S3 with timestamp-based path
            aws s3 cp "$ACTUAL_JAR" \
              "s3://${{ secrets.AWS_S3_BUCKET_REPOSITORY }}/artifacts/${{ env.TIMESTAMP }}/backend/${SERVICE_NAME}.jar"
            
            echo "✅ Uploaded JAR: $ACTUAL_JAR"
            echo "📍 S3 Location: s3://${{ secrets.AWS_S3_BUCKET_REPOSITORY }}/artifacts/${{ env.TIMESTAMP }}/backend/${SERVICE_NAME}.jar"
            
            # Store the timestamp for potential use in deployment
            echo "BUILD_TIMESTAMP=${{ env.TIMESTAMP }}" >> $GITHUB_ENV
          else
            echo "❌ JAR file not found: $JAR_FILE"
            exit 1
          fi

      - name: Create deployment metadata
        run: |
          # Create metadata file for deployment tracking
          cat > deployment-metadata.json <<EOF
          {
            "service_name": "discovery-service",
            "build_timestamp": "${{ env.TIMESTAMP }}",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "build_number": "${{ github.run_number }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "artifacts": {
              "jar": "artifacts/${{ env.TIMESTAMP }}/backend/discovery-service.jar"
            }
          }
          EOF
          
          # Upload metadata
          aws s3 cp deployment-metadata.json \
            "s3://${{ secrets.AWS_S3_BUCKET_REPOSITORY }}/artifacts/${{ env.TIMESTAMP }}/metadata.json"

      - name: Output build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** discovery-service" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** ${{ env.TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Path:** artifacts/${{ env.TIMESTAMP }}/backend/discovery-service.jar" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Use timestamp \`${{ env.TIMESTAMP }}\` for deployment" >> $GITHUB_STEP_SUMMARY
